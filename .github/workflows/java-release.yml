# name: "FullAuthModules"

# on:
#   pull_request:
#     types: [opened, synchronize, closed]
#     branches: [master, main, dev]

# jobs:
#   Build:
#     uses: velanbala/aw-core-workflows/.github/workflows/java-build.yml@workflows
#     with:
#       java-version: 1.8
#       gradle-version: 4.5.1
#       depends-on-node: true
#     secrets:
#       github-username: Full Creative Ci
#       github-pat: ${{ secrets.PACKAGES_TOKEN}}
#   Release:
#     steps:
#       # Retrieving version for monolithic
#       - name: Retrieve version
#         run: |
#           echo "::set-output name=api::$(grep "version '" Api/build.gradle | awk '{print $2}')"
#           echo "::set-output name=web::$(grep "version '" WebApp/build.gradle | awk '{print $2}')"
#           echo "::set-output name=fileserver::$(grep "version '" FileServer/build.gradle | awk '{print $2}')"
#         id: version
#       # Generate change logs and add it as comment in the respective pull request
#       - name: Generate Change logs
#         if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'master' || github.event.pull_request.base.ref == 'main')
#         uses: bala-raj/pull-request-changelog@master
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           branch: ${{ github.event.pull_request.base.ref }}
#       # Fetching change logs
#       - name: Get Change logs from Comment
#         uses: peter-evans/find-comment@v1
#         if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'master' || github.event.pull_request.base.ref == 'main')
#         id: fetchComment
#         with:
#           issue-number: ${{ github.event.number }}
#           comment-author: github-actions[bot]
#       # Auto increment tagging
#       - name: Tag
#         id: tag_version
#         if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'master' || github.event.pull_request.base.ref == 'main')
#         uses: mathieudutour/github-tag-action@v5.3
#         with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#       # Create Release For Changes
#       - name: Create Release
#         uses: actions/create-release@v1
#         if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'master' || github.event.pull_request.base.ref == 'main')
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ steps.tag_version.outputs.new_tag }}
#           release_name: ${{ github.event.pull_request.title }} # Get pull request Title
#           body:
#             | # All the Changes history  or features in the corresponding release
#             Api : ${{steps.version.outputs.api}}
#             WebApp : ${{steps.version.outputs.web}}
#             FileServer : ${{steps.version.outputs.fileserver}}
#             ${{ steps.fetchComment.outputs.comment-body }}
#           draft: false
#           prerelease: false # This is not a pre-release so set false
#       # For Deleting the Branch once code is merged
#       - name: Delete merged branch
#         if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
#         uses: koj-co/delete-merged-action@master
#         with:
#           branches: "!dev, !main, !master, !production"
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
